/* The following code was generated by JFlex 1.4.3 on 09.01.13 21:57 */

// vim: ft=jflex

package net.inferum.khaos.asm;

import static net.inferum.khaos.asm.KasmParser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09.01.13 21:57 from the specification file
 * <tt>KasmLexer.l</tt>
 */
public class KasmLexer implements KasmParser.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int S_BYTE = 4;
  public static final int YYINITIAL = 0;
  public static final int S_INTEGER = 8;
  public static final int S_LONG = 10;
  public static final int S_STRING = 2;
  public static final int S_SHORT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\50"+
    "\12\0\1\6\2\0\1\5\7\7\2\4\1\0\1\42\4\0\1\47"+
    "\2\10\1\44\3\10\1\11\1\45\4\11\1\45\2\11\1\43\1\11"+
    "\1\46\1\45\7\11\1\0\1\51\2\0\1\11\1\0\1\13\1\30"+
    "\1\23\1\22\1\25\1\10\1\26\1\12\1\32\1\35\1\11\1\14"+
    "\1\31\1\16\1\17\1\20\1\36\1\21\1\24\1\15\1\27\1\33"+
    "\1\11\1\34\1\37\1\11\1\40\1\0\1\41\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\2\4\1\1\20\5\1\6"+
    "\3\5\1\1\1\7\1\10\1\11\1\12\2\13\2\14"+
    "\1\0\1\15\1\13\2\16\1\0\2\17\1\0\2\20"+
    "\1\0\1\21\1\0\10\5\1\22\22\5\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\1\32\1\0"+
    "\1\33\1\0\1\34\1\0\1\35\1\5\1\36\1\37"+
    "\1\5\1\40\1\41\1\42\1\43\1\44\1\45\1\5"+
    "\1\46\1\5\1\47\1\50\1\51\1\52\1\5\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\5\1\71\1\72"+
    "\1\5\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\5\1\102\1\103\1\104\1\105\1\106\1\107\3\5"+
    "\1\0\1\5\1\110\1\0\1\111\2\5\1\0\1\112"+
    "\1\5\1\0\1\113\1\114\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\374\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec"+
    "\0\u0516\0\u0540\0\374\0\u056a\0\374\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\374\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u01f8\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24"+
    "\0\u0c4e\0\u0c78\0\u0ca2\0\u01f8\0\u0ccc\0\374\0\374\0\374"+
    "\0\374\0\374\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8"+
    "\0\u0df2\0\u0e1c\0\u085e\0\u0e46\0\u01f8\0\u01f8\0\u0e70\0\u01f8"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u01f8\0\u0f18\0\u0f42\0\u01f8\0\u0f6c"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u0f96\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u0fc0\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u0fea\0\u01f8\0\u01f8\0\u1014\0\u01f8"+
    "\0\u01f8\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\u01f8\0\u103e\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\374\0\u113a\0\374\0\u1164\0\u118e\0\u11b8"+
    "\0\374\0\u11e2\0\u120c\0\374\0\u01f8\0\u1236\0\u1260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\16"+
    "\1\25\1\26\1\27\1\30\3\16\1\31\1\32\1\33"+
    "\1\16\1\34\1\35\2\16\2\7\1\36\1\37\1\16"+
    "\1\40\1\41\1\42\1\43\1\7\1\44\2\0\45\44"+
    "\1\45\1\46\1\0\2\47\1\50\1\51\1\52\1\53"+
    "\1\51\31\0\1\54\1\55\10\0\2\47\1\50\1\56"+
    "\1\57\1\60\1\56\31\0\1\54\1\55\10\0\2\47"+
    "\1\50\1\61\1\62\1\63\1\61\31\0\1\54\1\55"+
    "\10\0\2\47\1\50\1\64\1\65\1\66\1\64\31\0"+
    "\1\54\1\55\63\0\1\11\52\0\1\12\52\0\2\13"+
    "\1\0\1\13\47\0\1\67\1\0\1\67\24\0\1\70"+
    "\21\0\1\13\2\0\1\13\46\0\2\16\1\0\31\16"+
    "\3\0\4\16\7\0\2\16\1\0\4\16\1\71\24\16"+
    "\3\0\4\16\7\0\2\16\1\0\7\16\1\72\3\16"+
    "\1\73\15\16\3\0\4\16\7\0\2\16\1\0\10\16"+
    "\1\74\2\16\1\75\15\16\3\0\4\16\7\0\2\16"+
    "\1\0\12\16\1\76\16\16\3\0\4\16\7\0\2\16"+
    "\1\0\10\16\1\77\5\16\1\100\12\16\3\0\4\16"+
    "\7\0\2\16\1\0\12\16\1\101\16\16\3\0\4\16"+
    "\7\0\2\16\1\0\16\16\1\102\12\16\3\0\4\16"+
    "\7\0\2\16\1\0\23\16\1\103\5\16\3\0\4\16"+
    "\7\0\2\16\1\0\22\16\1\104\6\16\3\0\4\16"+
    "\7\0\2\16\1\0\3\16\1\105\2\16\1\106\11\16"+
    "\1\107\10\16\3\0\4\16\7\0\2\16\1\0\5\16"+
    "\1\110\1\16\1\111\2\16\1\112\2\16\1\113\1\114"+
    "\1\115\10\16\1\116\3\0\4\16\7\0\2\16\1\0"+
    "\10\16\1\117\7\16\1\120\10\16\3\0\4\16\7\0"+
    "\2\16\1\0\7\16\1\121\21\16\3\0\4\16\7\0"+
    "\2\16\1\0\10\16\1\122\20\16\3\0\4\16\7\0"+
    "\2\16\1\0\15\16\1\123\13\16\3\0\4\16\3\0"+
    "\2\36\1\0\47\36\4\0\2\16\1\0\31\16\3\0"+
    "\1\16\1\124\2\16\7\0\2\16\1\0\31\16\3\0"+
    "\1\124\3\16\7\0\2\125\1\0\1\125\30\16\3\0"+
    "\3\16\1\124\13\0\30\16\3\0\4\16\3\0\1\44"+
    "\2\0\45\44\2\0\2\126\1\0\12\126\1\127\1\130"+
    "\2\126\1\131\26\126\1\132\1\126\1\0\2\47\52\0"+
    "\1\50\52\0\2\51\1\0\1\51\47\0\1\133\1\0"+
    "\1\133\24\0\1\134\21\0\1\51\2\0\1\51\42\0"+
    "\2\55\1\0\47\55\4\0\2\56\1\0\1\56\47\0"+
    "\1\135\1\0\1\135\24\0\1\136\21\0\1\56\2\0"+
    "\1\56\46\0\2\61\1\0\1\61\47\0\1\137\1\0"+
    "\1\137\24\0\1\140\21\0\1\61\2\0\1\61\46\0"+
    "\2\64\1\0\1\64\47\0\1\141\1\0\1\141\24\0"+
    "\1\142\21\0\1\64\2\0\1\64\47\0\1\67\1\0"+
    "\1\67\46\0\2\143\1\0\2\143\2\0\1\143\6\0"+
    "\2\143\1\0\1\143\2\0\1\143\13\0\1\143\11\0"+
    "\2\16\1\0\5\16\1\144\23\16\3\0\4\16\7\0"+
    "\2\16\1\0\13\16\1\145\15\16\3\0\4\16\7\0"+
    "\2\16\1\0\13\16\1\146\15\16\3\0\4\16\7\0"+
    "\2\16\1\0\7\16\1\147\21\16\3\0\4\16\7\0"+
    "\2\16\1\0\3\16\1\150\1\151\1\152\4\16\1\153"+
    "\1\16\1\154\1\155\13\16\3\0\4\16\7\0\2\16"+
    "\1\0\4\16\1\156\24\16\3\0\4\16\7\0\2\16"+
    "\1\0\6\16\1\157\1\16\1\160\20\16\3\0\4\16"+
    "\7\0\2\16\1\0\17\16\1\161\11\16\3\0\4\16"+
    "\7\0\2\16\1\0\6\16\1\162\22\16\3\0\4\16"+
    "\7\0\2\16\1\0\24\16\1\163\4\16\3\0\4\16"+
    "\7\0\2\16\1\0\11\16\1\164\17\16\3\0\4\16"+
    "\7\0\2\16\1\0\10\16\1\165\20\16\3\0\4\16"+
    "\7\0\2\16\1\0\3\16\1\166\1\167\1\170\4\16"+
    "\1\171\2\16\1\172\13\16\3\0\4\16\7\0\2\16"+
    "\1\0\21\16\1\173\7\16\3\0\4\16\7\0\2\16"+
    "\1\0\6\16\1\174\7\16\1\175\12\16\3\0\4\16"+
    "\7\0\2\16\1\0\16\16\1\176\12\16\3\0\4\16"+
    "\7\0\2\16\1\0\4\16\1\177\24\16\3\0\4\16"+
    "\7\0\2\16\1\0\12\16\1\200\16\16\3\0\4\16"+
    "\7\0\2\16\1\0\27\16\1\201\1\16\3\0\4\16"+
    "\7\0\2\16\1\0\6\16\1\202\7\16\1\203\12\16"+
    "\3\0\4\16\7\0\2\16\1\0\6\16\1\204\22\16"+
    "\3\0\4\16\7\0\2\16\1\0\13\16\1\205\15\16"+
    "\3\0\4\16\7\0\2\16\1\0\5\16\1\206\23\16"+
    "\3\0\4\16\7\0\2\16\1\0\6\16\1\207\22\16"+
    "\3\0\4\16\7\0\2\16\1\0\12\16\1\210\16\16"+
    "\3\0\4\16\7\0\2\16\1\0\12\16\1\211\16\16"+
    "\3\0\4\16\7\0\2\125\1\0\1\125\30\16\3\0"+
    "\4\16\10\0\1\133\1\0\1\133\46\0\2\212\1\0"+
    "\2\212\2\0\1\212\6\0\2\212\1\0\1\212\2\0"+
    "\1\212\13\0\1\212\12\0\1\135\1\0\1\135\46\0"+
    "\2\213\1\0\2\213\2\0\1\213\6\0\2\213\1\0"+
    "\1\213\2\0\1\213\13\0\1\213\12\0\1\137\1\0"+
    "\1\137\46\0\2\214\1\0\2\214\2\0\1\214\6\0"+
    "\2\214\1\0\1\214\2\0\1\214\13\0\1\214\12\0"+
    "\1\141\1\0\1\141\46\0\2\215\1\0\2\215\2\0"+
    "\1\215\6\0\2\215\1\0\1\215\2\0\1\215\13\0"+
    "\1\215\11\0\2\16\1\0\6\16\1\216\22\16\3\0"+
    "\4\16\7\0\2\16\1\0\17\16\1\217\11\16\3\0"+
    "\4\16\7\0\2\16\1\0\4\16\1\220\24\16\3\0"+
    "\4\16\7\0\2\16\1\0\4\16\1\221\24\16\3\0"+
    "\4\16\7\0\2\16\1\0\12\16\1\222\16\16\3\0"+
    "\4\16\7\0\2\16\1\0\4\16\1\223\24\16\3\0"+
    "\4\16\7\0\2\16\1\0\11\16\1\224\17\16\3\0"+
    "\4\16\7\0\2\16\1\0\11\16\1\225\17\16\3\0"+
    "\4\16\7\0\2\16\1\0\12\16\1\226\16\16\3\0"+
    "\4\16\7\0\2\16\1\0\23\16\1\227\5\16\3\0"+
    "\4\16\7\0\2\16\1\0\16\16\1\230\12\16\3\0"+
    "\4\16\6\0\1\231\2\16\1\0\16\16\1\232\12\16"+
    "\1\233\2\0\4\16\6\0\1\234\2\16\1\0\31\16"+
    "\1\235\2\0\4\16\7\0\2\16\1\0\6\16\1\236"+
    "\22\16\3\0\4\16\7\0\2\16\1\0\7\16\1\237"+
    "\21\16\3\0\4\16\6\0\1\240\2\16\1\0\31\16"+
    "\1\241\2\0\4\16\6\0\1\231\34\0\1\233\15\0"+
    "\2\16\1\0\17\16\1\242\11\16\3\0\4\16\6\0"+
    "\1\234\34\0\1\235\14\0\1\243\2\16\1\0\31\16"+
    "\1\244\2\0\4\16\7\0\2\16\1\0\17\16\1\245"+
    "\11\16\3\0\4\16\6\0\1\240\34\0\1\241\15\0"+
    "\2\16\1\0\16\16\1\246\12\16\3\0\4\16\6\0"+
    "\1\243\34\0\1\244\15\0\2\16\1\0\12\16\1\247"+
    "\16\16\3\0\4\16\6\0\1\231\2\16\1\0\31\16"+
    "\1\233\2\0\4\16\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4746];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\31\1\1\11\1\1\1\11"+
    "\5\1\1\0\1\11\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\0\35\1\5\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\66\1\1\0\1\1"+
    "\1\11\1\0\1\11\2\1\1\0\1\11\1\1\1\0"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Object yylval;
	private StringBuilder string = new StringBuilder();

	@Override
	public Object getLVal() {
		return yylval;
	}

	@Override
	public void yyerror(String msg) {
		System.err.println(String.format("%d:%d - %s", yyline+1, yycolumn+1, msg));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KasmLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KasmLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return LDH;
          }
        case 77: break;
        case 16: 
          { yylval = Long.parseLong(yytext()); return LLONG;
          }
        case 78: break;
        case 45: 
          { return STL;
          }
        case 79: break;
        case 30: 
          { return AND;
          }
        case 80: break;
        case 26: 
          { yylval = Short.parseShort(yytext().substring(1), 8); return LSHORT;
          }
        case 81: break;
        case 46: 
          { return STR;
          }
        case 82: break;
        case 56: 
          { return BGE;
          }
        case 83: break;
        case 33: 
          { return LDA;
          }
        case 84: break;
        case 67: 
          { return LDLA;
          }
        case 85: break;
        case 73: 
          { yybegin(S_LONG); return LONG;
          }
        case 86: break;
        case 62: 
          { yylval = Short.parseShort(yytext().substring(2), 16); return LSHORT;
          }
        case 87: break;
        case 61: 
          { yylval = Byte.parseByte(yytext().substring(2), 16); return LBYTE;
          }
        case 88: break;
        case 22: 
          { string.append('\n');
          }
        case 89: break;
        case 40: 
          { return RET;
          }
        case 90: break;
        case 39: 
          { return NEG;
          }
        case 91: break;
        case 42: 
          { return CMP;
          }
        case 92: break;
        case 24: 
          { string.append('\"');
          }
        case 93: break;
        case 68: 
          { return LDRR;
          }
        case 94: break;
        case 27: 
          { yylval = Integer.parseInt(yytext().substring(1), 8); return LINTEGER;
          }
        case 95: break;
        case 37: 
          { return LDS;
          }
        case 96: break;
        case 1: 
          { return yytext().charAt(0);
          }
        case 97: break;
        case 54: 
          { return BEQ;
          }
        case 98: break;
        case 19: 
          { yylval = yytext(); return REGISTER;
          }
        case 99: break;
        case 64: 
          { yylval = Long.parseLong(yytext().substring(2), 16); return LLONG;
          }
        case 100: break;
        case 23: 
          { string.append('\r');
          }
        case 101: break;
        case 15: 
          { yylval = Integer.parseInt(yytext()); return LINTEGER;
          }
        case 102: break;
        case 14: 
          { yylval = Short.parseShort(yytext()); return LSHORT;
          }
        case 103: break;
        case 6: 
          { /* ignore comment */
          }
        case 104: break;
        case 57: 
          { return MOD;
          }
        case 105: break;
        case 21: 
          { string.append('\t');
          }
        case 106: break;
        case 59: 
          { return XOR;
          }
        case 107: break;
        case 34: 
          { return LDL;
          }
        case 108: break;
        case 31: 
          { return ADD;
          }
        case 109: break;
        case 41: 
          { return DIV;
          }
        case 110: break;
        case 25: 
          { yylval = Byte.parseByte(yytext().substring(1), 8); return LBYTE;
          }
        case 111: break;
        case 35: 
          { return LDR;
          }
        case 112: break;
        case 5: 
          { yylval = yytext().substring(0, yytext().length()-1); return LABEL;
          }
        case 113: break;
        case 9: 
          { yybegin(YYINITIAL);
  									yylval = string.toString(); 
                                   return LSTRING;
          }
        case 114: break;
        case 52: 
          { return BRA;
          }
        case 115: break;
        case 66: 
          { return LDAA;
          }
        case 116: break;
        case 20: 
          { string.append(yytext());
          }
        case 117: break;
        case 71: 
          { return NOOP;
          }
        case 118: break;
        case 12: 
          { yylval = Byte.parseByte(yytext()); return LBYTE;
          }
        case 119: break;
        case 49: 
          { return BLT;
          }
        case 120: break;
        case 7: 
          { yybegin(S_STRING); string.setLength(0);
          }
        case 121: break;
        case 28: 
          { yylval = Long.parseLong(yytext().substring(1), 8); return LLONG;
          }
        case 122: break;
        case 48: 
          { return SUB;
          }
        case 123: break;
        case 53: 
          { return BSR;
          }
        case 124: break;
        case 18: 
          { return OR;
          }
        case 125: break;
        case 43: 
          { return STH;
          }
        case 126: break;
        case 55: 
          { return BGT;
          }
        case 127: break;
        case 13: 
          { yybegin(YYINITIAL);
          }
        case 128: break;
        case 10: 
          { string.append('\\');
          }
        case 129: break;
        case 65: 
          { return HALT;
          }
        case 130: break;
        case 63: 
          { yylval = Integer.parseInt(yytext().substring(2), 16); return LINTEGER;
          }
        case 131: break;
        case 72: 
          { yybegin(S_INTEGER); return INTEGER;
          }
        case 132: break;
        case 29: 
          { yylval = new Long(Long.parseLong(yytext().substring(2),16)); return NUM;
          }
        case 133: break;
        case 38: 
          { return NOT;
          }
        case 134: break;
        case 76: 
          { return STRING;
          }
        case 135: break;
        case 36: 
          { return LDC;
          }
        case 136: break;
        case 44: 
          { return STA;
          }
        case 137: break;
        case 2: 
          { return EOL;
          }
        case 138: break;
        case 3: 
          { /* ignore */
          }
        case 139: break;
        case 58: 
          { return MUL;
          }
        case 140: break;
        case 60: 
          { return JSR;
          }
        case 141: break;
        case 8: 
          { string.append( yytext() );
          }
        case 142: break;
        case 4: 
          { yylval = new Long(Integer.parseInt(yytext())); return NUM;
          }
        case 143: break;
        case 74: 
          { yybegin(S_BYTE); return BYTE;
          }
        case 144: break;
        case 47: 
          { return STS;
          }
        case 145: break;
        case 70: 
          { return TRAP;
          }
        case 146: break;
        case 51: 
          { return BNE;
          }
        case 147: break;
        case 69: 
          { return LDSA;
          }
        case 148: break;
        case 75: 
          { yybegin(S_SHORT); return SHORT;
          }
        case 149: break;
        case 50: 
          { return BLE;
          }
        case 150: break;
        case 17: 
          { yylval = new Long(Long.parseLong(yytext().substring(1),8)); return NUM;
          }
        case 151: break;
        case 11: 
          { 
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
